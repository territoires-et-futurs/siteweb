version: 2.1
# "rendez-vous à la française", at https://app.circleci.com/projects/project-setup/github/territoiresfuturs/siteweb/
# # TODO : improve all this, by using a territoiresfuturs orb, and use docker executors only
parameters:
  admin_task:
    type: enum
    enum: [delete_oci_image, blank]
    default: blank
  secrethub_org:
    type: string
    default: "territoiresfuturs"
    description: "SecretHub Org to use to fetch secrets ?"
  secrethub_repo:
    type: string
    default: "gitops"
    description: "SecretHub Repo to use to fetch secrets ?"
orbs:
  docker: circleci/docker@1.5
  secrethub: secrethub/cli@1.0.0
jobs:
  empty_job:
    docker:
     - image: alpine
    resource_class: small
    working_directory: /mnt/ramdisk
    steps:
      - run:
          name: "This is a blank job"
          command: echo "No task is executed."
  container_release:
    machine:
      image: 'ubuntu-1604:201903-01'
      resource_class: medium
    environment:
      SECRETHUB_ORG: << pipeline.parameters.secrethub_org >>
      SECRETHUB_REPO: << pipeline.parameters.secrethub_repo >>
    steps:
      - checkout
      - secrethub/install
      - docker/install-docker-compose
      - run:
          name: "Container images build for the Prod env."
          command: |
            echo "Checking Circle CI Job env. variables"
            source .prod.env
            export CURRY_TAG=$(git describe --exact-match --tags $(git log -n1 --pretty='%h'))
            export MAJOR_VERSION=(echo "${CURRY_TAG}" | awk -F '.' '{print $1}')
            export MINOR_VERSION=(echo "${CURRY_TAG}" | awk -F '.' '{print $2}')
            export PATCH_VERSION=(echo "${CURRY_TAG}" | awk -F '.' '{print $3}')
            semver Checks
            if [ "x${MAJOR_VERSION}" == "x" ];
              echo "the major version could not be extracted out of the resolved git release tag [${CURRY_TAG}] "
              exit 3
            fi;
            if [ "x${MINOR_VERSION}" == "x" ];
              echo "the minor version could not be extracted out of the resolved git release tag [${CURRY_TAG}] "
              exit 3
            fi;
            if [ "x${PATCH_VERSION}" == "x" ];
              echo "the patch version could not be extracted out of the resolved git release tag [${CURRY_TAG}] "
              exit 3
            fi;
            export QUAY_OCI_IMAGE_TAG="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"s
            echo "QUAY_OCI_IMAGE_TAG=[${QUAY_OCI_IMAGE_TAG}]"
            export GIT_COMMIT_ID=$(git rev-parse --short HEAD)
            export CICD_BUILD_ID=$CIRCLE_BUILD_NUM
            export CICD_BUILD_TIMESTAMP=$(date --rfc-3339 seconds)
            echo "GIT_COMMIT_ID=${GIT_COMMIT_ID}" | tee -a .prod.env
            echo "CICD_BUILD_ID=${CICD_BUILD_ID}" | tee -a .prod.env
            echo "CICD_BUILD_TIMESTAMP='${CICD_BUILD_TIMESTAMP}'" | tee -a .prod.env
            source .prod.env
            # ---
            # interpolation of build args (don't know why seems necessary in Circle CI and
            # not on my machines, maybe different versions of docker-compose)
            # ---
            sed -i "s#ALPINE_OCI_IMAGE_TAG=.*#ALPINE_OCI_IMAGE_TAG=${ALPINE_OCI_IMAGE_TAG}#g" docker-compose.prod.build.yml
            sed -i "s#GOLANG_VERSION=.*#GOLANG_VERSION=${GOLANG_VERSION}#g" docker-compose.prod.build.yml
            sed -i "s#HUGO_VERSION=.*#HUGO_VERSION=${HUGO_VERSION}#g" docker-compose.prod.build.yml
            sed -i "s#GIT_COMMIT_ID=.*#GIT_COMMIT_ID=${GIT_COMMIT_ID}#g" docker-compose.prod.build.yml
            sed -i "s#CICD_BUILD_ID=.*#CICD_BUILD_ID=${CICD_BUILD_ID}#g" docker-compose.prod.build.yml
            sed -i "s#CICD_BUILD_TIMESTAMP=.*#CICD_BUILD_TIMESTAMP=${CICD_BUILD_TIMESTAMP}#g" docker-compose.prod.build.yml
            sed -i "s#QUAY_OCI_IMAGE_TAG=.*#QUAY_OCI_IMAGE_TAG=${QUAY_OCI_IMAGE_TAG}#g" docker-compose.prod.build.yml
            sed -i "s#image: quay.io/territoiresfuturs/siteweb:.*#image: quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}#g" docker-compose.prod.build.yml
            # ---
            echo "# --------------------------------------------------------------------------- #"
            echo "# -------   DOCKER COMPOSE CONFIG : "
            echo "# --------------------------------------------------------------------------- #"
            docker-compose -f ./docker-compose.prod.build.yml config
            echo "# --------------------------------------------------------------------------- #"
            docker-compose -f ./docker-compose.prod.build.yml build territoiresfuturs_prod
            # and now [quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}] should exists among [docker images]
            docker images
      - run:
          name: "Docker login to Container Registry"
          command: |
            echo "Checking Circle CI Job env. variables"
            echo "SECRETHUB_ORG=[${SECRETHUB_ORG}]"
            echo "SECRETHUB_REPO=[${SECRETHUB_REPO}]"
            QUAY_BOT_USERNAME=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/username)
            QUAY_BOT_SECRET=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/usersecret)
            echo "QUAY_BOT_USERNAME=[${QUAY_BOT_USERNAME}]"
            # echo "QUAY_BOT_SECRET=[${QUAY_BOT_SECRET}]"
            docker login -u="${QUAY_BOT_USERNAME}" -p="${QUAY_BOT_SECRET}" quay.io
      - run:
          name: "Container images push to Quay.io for the Production image"
          command: |
            echo "Checking Circle CI Job env. variables"
            echo "SECRETHUB_ORG=[${SECRETHUB_ORG}]"
            echo "SECRETHUB_REPO=[${SECRETHUB_REPO}]"
            QUAY_BOT_USERNAME=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/username)
            QUAY_BOT_SECRET=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/usersecret)
            echo "QUAY_BOT_USERNAME=[${QUAY_BOT_USERNAME}]"
            # echo "QUAY_BOT_SECRET=[${QUAY_BOT_SECRET}]"
            docker login -u="${QUAY_BOT_USERNAME}" -p="${QUAY_BOT_SECRET}" quay.io
            source .prod.env
            echo "QUAY_OCI_IMAGE_TAG=[${QUAY_OCI_IMAGE_TAG}]"
            export GIT_COMMIT_ID=$(git rev-parse --short HEAD)
            export CICD_BUILD_ID=$CIRCLE_BUILD_NUM
            export OCI_IMAGE_GUN="quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}"
            export CICD_BUILD_TIMESTAMP=$(docker inspect --format '{{ index .Config.Labels "io.territoiresfuturs.cicd.build.timestamp"}}' "${OCI_IMAGE_GUN}")
            echo "GIT_COMMIT_ID=[${GIT_COMMIT_ID}]"
            echo "CICD_BUILD_ID=[${CICD_BUILD_ID}]"
            echo "CICD_BUILD_TIMESTAMP=[${CICD_BUILD_TIMESTAMP}]"
            docker tag "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}" "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}-latest"
            docker push "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}"
            docker push "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}-latest"

  # will build and push image with soratable tags, according the stagin workflow described at https://fluxcd.io/docs/guides/image-update/
  container_staging:
    machine:
      image: 'ubuntu-1604:201903-01'
      resource_class: medium
    environment:
      SECRETHUB_ORG: << pipeline.parameters.secrethub_org >>
      SECRETHUB_REPO: << pipeline.parameters.secrethub_repo >>
    steps:
      - checkout
      - secrethub/install
      - docker/install-docker-compose
      - run:
          name: "Container images build for the Prod env."
          command: |
            echo "Checking Circle CI Job env. variables"
            source .staging.env
            export CURRY_GIT_BRANCH=$(git status | grep 'On branch' | awk '{print $3}')
            if [ "x${CURRY_GIT_BRANCH}" == "x" ];
              echo "You are not on a checked out branch (you did not get there in this git repo by runing a [git checkout <name of a git branch>]) "
              # exit 3
            else
              echo "You are staging your app for the [${CURRY_GIT_BRANCH}] git branch"
            fi;
            export GIT_COMMIT_ID=$(git rev-parse --long HEAD)
            export QUAY_OCI_IMAGE_TAG=${CURRY_GIT_BRANCH}-${GIT_COMMIT_ID:0:7}-$(date +%s)
            echo "QUAY_OCI_IMAGE_TAG=[${QUAY_OCI_IMAGE_TAG}]"
            export CICD_BUILD_ID=$CIRCLE_BUILD_NUM
            export CICD_BUILD_TIMESTAMP=$(date --rfc-3339 seconds)
            echo "GIT_COMMIT_ID=${GIT_COMMIT_ID}" | tee -a .staging.env
            echo "CICD_BUILD_ID=${CICD_BUILD_ID}" | tee -a .staging.env
            echo "CICD_BUILD_TIMESTAMP='${CICD_BUILD_TIMESTAMP}'" | tee -a .staging.env
            source .staging.env
            # ---
            # interpolation of build args (don't know why seems necessary in Circle CI and
            # not on my machines, maybe different versions of docker-compose)
            # ---
            sed -i "s#ALPINE_OCI_IMAGE_TAG=.*#ALPINE_OCI_IMAGE_TAG=${ALPINE_OCI_IMAGE_TAG}#g" docker-compose.prod.build.yml
            sed -i "s#GOLANG_VERSION=.*#GOLANG_VERSION=${GOLANG_VERSION}#g" docker-compose.prod.build.yml
            sed -i "s#HUGO_VERSION=.*#HUGO_VERSION=${HUGO_VERSION}#g" docker-compose.prod.build.yml
            sed -i "s#GIT_COMMIT_ID=.*#GIT_COMMIT_ID=${GIT_COMMIT_ID}#g" docker-compose.prod.build.yml
            sed -i "s#CICD_BUILD_ID=.*#CICD_BUILD_ID=${CICD_BUILD_ID}#g" docker-compose.prod.build.yml
            sed -i "s#CICD_BUILD_TIMESTAMP=.*#CICD_BUILD_TIMESTAMP=${CICD_BUILD_TIMESTAMP}#g" docker-compose.prod.build.yml
            sed -i "s#QUAY_OCI_IMAGE_TAG=.*#QUAY_OCI_IMAGE_TAG=${QUAY_OCI_IMAGE_TAG}#g" docker-compose.prod.build.yml
            sed -i "s#image: quay.io/territoiresfuturs/siteweb:.*#image: quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}#g" docker-compose.prod.build.yml
            # ---
            echo "# --------------------------------------------------------------------------- #"
            echo "# -------   DOCKER COMPOSE CONFIG : "
            echo "# --------------------------------------------------------------------------- #"
            docker-compose -f ./docker-compose.prod.build.yml config
            echo "# --------------------------------------------------------------------------- #"
            docker-compose -f ./docker-compose.prod.build.yml build territoiresfuturs_staging
            # and now [quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}] should exists among [docker images]
            docker images
      - run:
          name: "Docker login to Container Registry"
          command: |
            echo "Checking Circle CI Job env. variables"
            echo "SECRETHUB_ORG=[${SECRETHUB_ORG}]"
            echo "SECRETHUB_REPO=[${SECRETHUB_REPO}]"
            QUAY_BOT_USERNAME=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/username)
            QUAY_BOT_SECRET=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/usersecret)
            echo "QUAY_BOT_USERNAME=[${QUAY_BOT_USERNAME}]"
            # echo "QUAY_BOT_SECRET=[${QUAY_BOT_SECRET}]"
            docker login -u="${QUAY_BOT_USERNAME}" -p="${QUAY_BOT_SECRET}" quay.io
      - run:
          name: "Container images push to Quay.io for the Production image"
          command: |
            echo "Checking Circle CI Job env. variables"
            echo "SECRETHUB_ORG=[${SECRETHUB_ORG}]"
            echo "SECRETHUB_REPO=[${SECRETHUB_REPO}]"
            QUAY_BOT_USERNAME=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/username)
            QUAY_BOT_SECRET=$(secrethub read ${SECRETHUB_ORG}/${SECRETHUB_REPO}/territoiresfuturs/gitops/bot/quay.io/usersecret)
            echo "QUAY_BOT_USERNAME=[${QUAY_BOT_USERNAME}]"
            # echo "QUAY_BOT_SECRET=[${QUAY_BOT_SECRET}]"
            docker login -u="${QUAY_BOT_USERNAME}" -p="${QUAY_BOT_SECRET}" quay.io
            source .staging.env
            export CURRY_GIT_BRANCH=$(git status | grep 'On branch' | awk '{print $3}')
            if [ "x${CURRY_GIT_BRANCH}" == "x" ];
              echo "You are not on a checked out branch (you did not get there in this git repo by runing a [git checkout <name of a git branch>]) "
              # exit 3
            else
              echo "You are staging your app for the [${CURRY_GIT_BRANCH}] git branch"
            fi;
            export GIT_COMMIT_ID=$(git rev-parse --long HEAD)
            export QUAY_OCI_IMAGE_TAG=${CURRY_GIT_BRANCH}-${GIT_COMMIT_ID:0:7}-$(date +%s)
            echo "QUAY_OCI_IMAGE_TAG=[${QUAY_OCI_IMAGE_TAG}]"
            export CICD_BUILD_ID=$CIRCLE_BUILD_NUM
            export OCI_IMAGE_GUN="quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}"
            export CICD_BUILD_TIMESTAMP=$(docker inspect --format '{{ index .Config.Labels "io.territoiresfuturs.cicd.build.timestamp"}}' "${OCI_IMAGE_GUN}")
            echo "GIT_COMMIT_ID=[${GIT_COMMIT_ID}]"
            echo "CICD_BUILD_ID=[${CICD_BUILD_ID}]"
            echo "CICD_BUILD_TIMESTAMP=[${CICD_BUILD_TIMESTAMP}]"
            docker tag "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}" "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}-latest"
            docker push "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}"
            docker push "quay.io/territoiresfuturs/siteweb:${QUAY_OCI_IMAGE_TAG}-latest"


workflows:
  version: 2.1
  release:
    jobs:
      - container_release:
          context: territoiresfuturs-io-cicd
          filters:
            branches:
              ignore:
                # --- git flow
                - master
                - develop
                - /^feature\/.*/
                - /^support\/.*/
                - /^bugfix\/.*/
                - /^hotfix\/.*/
                - /^release\/.*/
                # --- CMS
                - /^content\/.*/
                # ---
            tags:
              only:
                - /^[0-999].[0-999].[0-999]/
                - /^[0-999].[0-999].[0-999]-alpha/
                - /^[0-999].[0-999].[0-999]-beta/

  # staging will hapen on the develop and the support branches
  stage:
    jobs:
      - container_staging:
          context: territoiresfuturs-io-cicd
          filters:
            branches:
              only:
                # --- git flow
                - develop
                # ---
                - /^support\/.*/
